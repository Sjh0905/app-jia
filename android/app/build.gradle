apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('MM-dd-kk-mm')
    return formattedDate
}

//apply from: "../../node_modules/react-native/react.gradle"
//apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.twentytwenty.exchange"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 18
        versionName "1.0.18"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
//    compileOptions{
//        incremental = false
//    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    dexOptions{
        jumboMode true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
//    签名相关
    signingConfigs {
        debug {
            //storeFile file(MYAPP_RELEASE_STORE_FILE)
            //storePassword MYAPP_RELEASE_STORE_PASSWORD
            //keyAlias MYAPP_RELEASE_KEY_ALIAS
            //keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }

        release {

            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD


//                           storeFile file('/Users/huihui/Desktop/ex_app/android/app/my-release-key.keystore')
//                           storePassword '0505@.'
//                           keyAlias 'my-key-alias'
//                           keyPassword '0505@.'

        }
    }

    buildTypes {
        debug{
//            buildConfigField "String", "BASE_URL", "\"https://app.2020.exchange\""//注意：必须要有反斜杠，不能直接写成"http://192.168.2.109:8080"，否咋会报错
//            buildConfigField "String", "SOCKET_URL", "\"wss://wss.2020.exchange/v1/market/notification\""

            buildConfigField "String", "BASE_URL", "\"http://app.2020-ex.com\""
            buildConfigField "String", "SOCKET_URL", "\"ws://appwss.2020-ex.com/v1/market/notification\""

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            minifyEnabled false
            zipAlignEnabled true

//            签名相关
            signingConfig signingConfigs.debug
//            热更新相关
//            buildConfigField "String", "CODEPUSH_KEY", "sW5jHeqd8qCneRuSlZHKHP0i8Sat4ksvOXqog"
        }

        release {
            buildConfigField "String", "BASE_URL", "\"https://app.2020.exchange\""
            buildConfigField "String", "SOCKET_URL", "\"wss://wss.2020.exchange/v1/market/notification\""

            //是否混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            签名相关
            signingConfig signingConfigs.release
//            热更新相关
//            buildConfigField "String", "CODEPUSH_KEY", '"sW5jHeqd8qCneRuSlZHKHP0i8Sat4ksvOXqog"'
        }
    }
    packagingOptions {exclude 'META-INF/rxjava.properties'}

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    //指定我们包的输出文件名与我们的渠道名字有关
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "2020-" + "${variant.name}-${variant.versionName}-${buildTime()}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-camera')
    implementation project(':react-native-cookies')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-fs')
    implementation project(':react-native-extra-dimensions-android')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-device-info')
    implementation project(':react-native-code-push')
    implementation project(':react-native-i18n')
    implementation project(':push')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.facebook.fresco:fresco:1.8.1'
    implementation 'com.facebook.fresco:animated-gif:1.8.1'
    implementation 'com.facebook.react:react-native:0.54.2'
    // From node_modules
    implementation 'com.umeng.sdk:common:1.5.3'
    implementation 'com.umeng.sdk:analytics:7.5.0'
    implementation files('libs/gt3geetest_sdk_3.4.8.aar')
    //rx2
    implementation "io.reactivex.rxjava2:rxjava:2.0.7"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar"
    //rx1
    implementation "io.reactivex:rxjava:1.2.9"
    implementation "io.reactivex:rxandroid:1.2.1"

//    implementation "com.github.vondear:RxTools:v1.7.6.8"

    implementation "com.squareup.retrofit2:retrofit:2.2.0"
    implementation "com.squareup.retrofit2:converter-gson:2.2.0"
    implementation "com.squareup.retrofit2:converter-scalars:2.2.0"
    implementation "com.squareup.retrofit2:adapter-rxjava:2.2.0"
    implementation "com.squareup.okhttp3:okhttp:3.8.1"

    implementation 'com.alibaba:fastjson:1.2.46'
    implementation 'com.alibaba:fastjson:1.1.68.android'

    implementation 'com.android.support:multidex:1.0.0'

    //华为Push通道
    implementation 'com.umeng.sdk:push-huawei:1.0.0'
    //小米Push通道
    implementation 'com.umeng.sdk:push-xiaomi:1.0.0'
    implementation 'com.umeng.sdk:push-meizu:1.0.0'
    implementation 'com.umeng.sdk:utdid:1.1.5.3'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
